{"version":3,"file":"static/js/77.396c68fe.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","components/RegisterForm/index.js","pages/RegisterPage/RegisterPage.styled.jsx","pages/RegisterPage/index.js","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport { register } from \"redux/auth/auth-operations\";\nimport * as Yup from 'yup';\nimport { ErrorMessage, Field, Formik } from 'formik';\n\nimport { AbsDivCss, AnchorCss, ButtonEye, ErrorText, FlexDivCss, FormCss, ReusableTitleCss, TextCss, TextWrapCss } from \"./RegisterForm.styled\";\nimport Button from 'shared/components/Button/Button';\n\nimport { ReactComponent as Cross } from '../../icons/cross-small.svg';\nimport { ReactComponent as EyeOpen } from '../../icons/eye-open.svg';\nimport { ReactComponent as EyeClosed } from '../../icons/eye-closed.svg';\n\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters')\n    .max(16, 'Password must be less than 16 characters')\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,16}$/,\n      'Password must contain at least 1 uppercase letter, 1 lowercase letter and 1 number'\n    )\n    .required('Required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\n\nconst RegisterForm = () => {\n    const [open, setOpen] = useState({\n      passwordEye: false,\n      confirmPasswordEye: false,\n    });\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, actions) => {\n      const { email, password } = values;\n      const payload = { email, password };\n      dispatch(register(payload));\n      \n      actions.resetForm();\n    };\n    return (\n      <FlexDivCss>\n        <ReusableTitleCss>Register</ReusableTitleCss>\n        <Formik\n          initialValues={{ email: '', password: '', confirmPassword: '' }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ errors, values, touched }) => {\n            return (\n              <FormCss>\n                <div>\n                  <Field\n                    name=\"email\"\n                    type=\"email\"\n                    className={errors.email ? 'input-error' : 'input-valid'}\n                  />\n                  <ErrorText>\n                    <ErrorMessage name=\"email\" />\n                  </ErrorText>\n                  {errors.email && (\n                    <AbsDivCss>\n                      <Cross width=\"24\" height=\"24\" stroke=\"#F43F5E\" />\n                    </AbsDivCss>\n                  )}\n                </div>\n                <div>\n                  <Field\n                    className={errors.password ? 'input-error' : 'input-valid'}\n                    name=\"password\"\n                    type={open.passwordEye ? 'text' : 'password'}\n                  />\n                  <ErrorText>\n                    <ErrorMessage name=\"password\" />\n                  </ErrorText>\n\n                  {open.passwordEye ? (\n                    <ButtonEye\n                      type=\"button\"\n                      onClick={() => setOpen({ ...open, passwordEye: false })}\n                    >\n                      <EyeOpen width=\"24\" height=\"24\" />\n                    </ButtonEye>\n                  ) : (\n                    <ButtonEye\n                      type=\"button\"\n                      onClick={() => setOpen({ ...open, passwordEye: true })}\n                    >\n                      <EyeClosed width=\"24\" height=\"24\" />\n                    </ButtonEye>\n                  )}\n                  {errors.password && (\n                    <AbsDivCss>\n                      <Cross width=\"24\" height=\"24\" stroke=\"#F43F5E\" />\n                    </AbsDivCss>\n                  )}\n                </div>\n                <AnchorCss>\n                  <Field\n                    className={\n                      errors.confirmPassword ? 'input-error' : 'input-valid'\n                    }\n                    name=\"confirmPassword\"\n                    type={open.confirmPasswordEye ? 'text' : 'password'}\n                  />\n                  <ErrorText>\n                    <ErrorMessage className=\"form-div\" name=\"confirmPassword\" />\n                  </ErrorText>\n                  {open.confirmPasswordEye ? (\n                    <ButtonEye\n                      type=\"button\"\n                      onClick={() =>\n                        setOpen({ ...open, confirmPasswordEye: false })\n                      }\n                    >\n                      <EyeOpen width=\"24\" height=\"24\" fill=\"none\" />\n                    </ButtonEye>\n                  ) : (\n                    <ButtonEye\n                      type=\"button\"\n                      onClick={() =>\n                        setOpen({ ...open, confirmPasswordEye: true })\n                      }\n                    >\n                      <EyeClosed width=\"24\" height=\"24\" stroke=\"#54ADFF\" fill=\"none\" />\n                    </ButtonEye>\n                  )}\n                  {errors.confirmPassword && (\n                    <AbsDivCss>\n                      <Cross width=\"24\" height=\"24\" stroke=\"#F43F5E\" />\n                    </AbsDivCss>\n                  )}\n                </AnchorCss>\n                <Button className=\"form-button\" type=\"submit\">\n                  Submit\n                </Button>\n                <TextWrapCss>\n                  <TextCss>Already have an account?</TextCss>\n                  <Link to=\"/login\">Login</Link>\n                </TextWrapCss>\n              </FormCss>\n            );\n          }}\n        </Formik>\n      </FlexDivCss>\n    );\n}\n\nexport default RegisterForm;\n","import RegisterForm from \"./RegisterForm\";\n\nexport default RegisterForm;","import styled from '@emotion/styled';\n\n\nimport bg_mobile_paws from '../../images/bg_img/mobile/bg_mobile_paws_full_original.png';\nimport bg_mobile_paws_2x from '../../images/bg_img/mobile/bg_mobile_paws_full_2x_original.png';\nimport bg_tab_paws from '../../images/bg_img/tab/bg_tablet_paws_full_original.png';\nimport bg_tab_paws_2x from '../../images/bg_img/tab/bg_tablet_paws_full_2x_original.png';\nimport bg_desc_paws from '../../images/bg_img/desc/bg_desc_paws_full_original.png';\nimport bg_desc_paws_2x from '../../images/bg_img/desc/bg_desc_paws_full_2x_original.png';\nimport { background, retina } from 'shared/utils/mixin.styled';\n\nexport const RegisterCss = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background-image: url(${bg_mobile_paws});\n    ${background('no-repeat', 'center', 'cover')};\n  ${retina(bg_mobile_paws_2x)};\n\n  @media screen and (min-width: 768px) {\n    background-image: url(${bg_tab_paws});\n      ${background('no-repeat', 'center', 'cover')};\n    ${retina(bg_tab_paws_2x)};\n  }\n  @media screen and (min-width: 1280px) {\n    background-image: url(${bg_desc_paws});\n      ${background('no-repeat', 'center', 'cover')};\n    ${retina(bg_desc_paws_2x)};\n  }\n`;\n\n","import RegisterPage from \"./RegisterPage\";\n\nexport default RegisterPage;","import RegisterForm from 'components/RegisterForm';\nimport { RegisterCss } from './RegisterPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <RegisterCss>\n      <RegisterForm />\n    </RegisterCss>\n  );\n}\n\nexport default RegisterPage;\n\n"],"names":["validationSchema","Yup","shape","email","required","password","min","max","matches","confirmPassword","oneOf","useState","passwordEye","confirmPasswordEye","open","setOpen","dispatch","useDispatch","initialValues","onSubmit","values","actions","payload","register","resetForm","errors","touched","name","type","className","width","height","stroke","onClick","fill","Button","to","RegisterCss","styled","bg_mobile_paws","background","retina","bg_mobile_paws_2x","bg_tab_paws","bg_tab_paws_2x","bg_desc_paws","bg_desc_paws_2x"],"sourceRoot":""}